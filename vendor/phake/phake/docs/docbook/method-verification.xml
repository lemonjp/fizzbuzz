<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Method Verification</title>
	<section><title>Basic Method Verification</title>
		<para>
			The <function>Phake::verify()</function> method is used to assert that method calls have been
			made on a mock object that you can create with <function>Phake::mock()</function>. 
			<function>Phake::verify()</function> accepts the mock object you want to verify calls against.
			Mock objects in Phake can almost be viewed as a tape recorder. Any time the code you are testing
			calls a method on an object you create with <function>Phake::mock()</function> it is going to
			record the method that you called along with all of the parameters used to call that method. Then
			<function>Phake::verify()</function> will look at that recording and allow you to assert wether
			or not a certain call was made.
		</para>
		<para>
			The Phake::verify() call here, verifies that the method foo() has been called once (and only once) with no parameters on the object $mock. A very important thing to note here that is a departure from most (if not all) other PHP mocking frameworks is that you want to verify the method call AFTER the method call takes place. Other mocking frameworks such as the one built into PHPUnit depend on you setting the expectations of what will get called prior to running the system under test.
		</para>
		<para>
			Phake strives to allow you to follow the four phases of a unit test as layed out in xUnit Test Patterns: setup, exercise, verify, and teardown. The setup phase of a test using Phake for mocking will now include calls to Phake::mock() for each class you want to mock. The exercise portion of your code will remain the same. The verify section of your code will include calls to Phake::verify(). The exercise and teardown phases will remain unchanged.
		</para>
	</section>
	<section><title>Verifying Method Parameters</title>
		<para>
			Verifying method parameters using Phake is very simple yet can be very flexible. There are a wealth of options for matching parameters that is discussed later on in Method Parameter Matchers.
		</para>
	</section>
	<section><title>Verifying Multiple Invocations</title>
		<para>
			A common need for mock objects is the ability to variable multiple invocations on that object. Phake allows you to use Phake::verify() multiple times on the same object. A notable difference between Phake and PHPUnit’s mocking framework is the ability to mock multiple invocations of the same method with no regard for call sequences. The PHPUnit mocking test below would fail for this reason.
		</para>
		<xi:include href="method-verification/multiple-invocations-phpunit-bad.xml" />
		<para>
			The reason this test fails is because by default PHPUnit only allows a singl expectation per method. The way you can fix this is by using the at() matcher. This allows you to specify the index of the invocation you want to match again. So to make the test above work you would have to change it.
		</para>
		<xi:include href="method-verification/multiple-invocations-phpunit-good.xml" />
		<para>
			This test will now run as expected. There is still one small problem however and that is that you are now testing not just the invocations but also the order of invocations. Many times the order in which two calls are made really do not matter. If swapping the order of two method calls will not break your application then there is no reason to enforce that code structure through a unit test. Unfortunately, you cannot have multiple invocations of a method in PHPUnit without enforcing call order. In Phake these two notions of call order and multiple invocations are kept completely distinct. Here is the same test written using Phake.
		</para>
		<xi:include href="method-verification/multiple-invocations-phake.xml" />
		<para>
			You can switch the calls around in this example as much as you like and the test will still pass. You can mock as many different invocations of the same method as you need.
		</para>
		<para>
			If you would like to verify the exact same parameters are used on a method multiple times (or they all match the same constraints multiple times) then you can use the verification mode parameter of Phake::verify(). The second parameter to Phake::verify() allows you to specify how many times you expect that method to be called with matching parameters. If no value is specified then the default of one is used. The other options are:
		</para>
		<orderedlist>
			<listitem>Phake::times($n) – Where $n equals the exact number of times you expect the method to be called.</listitem>
			<listitem>Phake::atLeast($n) – Where $n is the minimum number of times you expect the method to be called.</listitem>
			<listitem>Phake::atMost($n) – Where $n is the most number of times you would expect the method to be called.</listitem>
		</orderedlist>
		<para>
			Here is an example of this in action.
		</para>
		<xi:include href="method-verification/multiple-invocations-same-call.xml" />
	</section>
	<section><title>Verifying Calls Happen in a Particular Order</title>
		<para>
			Sometimes the desired behavior is that you verify calls happen in a particular order. Say there is a functional reason for the two variants of fooWithArgument() to be called in the order of the original test. You can utilize Phake::inOrder() to ensure the order of your call invocations. Phake::inOrder() takes one or more arguments and errors out in the event that one of the verified calls was invoked out of order. The calls don’t have to be in exact sequential order, there can be other calls in between, it just ensures the specified calls themselves are called in order relative to each other. Below is an example Phake test that behaves similarly to the PHPUnit test that utilized at().
		</para>
		<xi:include href="method-verification/calls-in-order.xml" />
	</section>
	<section><title>Verifying No Interaction with a Mock so Far</title>
		<para>
			Occasionally you may want to ensure that no interactions have occurred with a mock object. This can be done
            by passing your mock object to Phake::verifyNoInteraction($mock). This will not prevent further interaction
            with your mock, it will simply tell you whether or not any interaction up to that point has happened. You
            can pass multiple arguments to this method to verify no interaction with multiple mock objects.
		</para>
	</section>
	<section><title>Verifying No Further Interaction with a Mock</title>
		<para>
			There is a similar method to prevent any future interaction with a mock. This can be done by passing a mock
            object to Phake::verifyNoFurtherInteraction($mock). You can pass multiple arguments to this method to
            verify no further interaction occurs with multiple mock objects.
		</para>
	</section>
	<section><title>Verifying Magic Methods</title>
		<para>
			Magic methods are commonly used in PHP and the need to be able to seemlessly utilize them is always necessary. Most magic methods can be verified using the method name just like you would any other method. The one exception to this is the __call() method. This method is overwritten on each mock already to allow for the fluent api that Phake utilizes. If you want to verify a particular invoaction of __call() you can verify the actual method call by mocking the method passed in as the first parameter.
		</para>
		<para>
			Consider the following class.
		</para>
		<xi:include href="method-verification/magic-class.xml" />
		<para>
			You could mock an invocation of the __call() method through a userspace call to magicCall() with the following code.
		</para>
		<xi:include href="method-verification/magic-method-verify.xml" />
		<para>
			If for any reason you need to explicitely verify calls to __call() then you can use Phake::verifyCallMethodWith().
		</para>
		<xi:include href="method-verification/magic-method-explicit-verify.xml" />
		<para>
			This last section is purposely vague as this method of explicitly verifying statics will likely be replaced in the very near future.
		</para>
	</section>
</chapter>
