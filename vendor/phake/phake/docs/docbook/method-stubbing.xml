<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" id="stubbing">
	<title>Method Stubbing</title>
	<section id="basic-stubbing"><title>Basic Method Stubbing</title>
		<para>
			The <function>Phake::when()</function> method is used to stub methods in Phake. As discussed in the introduction,
			stubbing allows an object method to be forced to return a particular value given a set of parameters. Similarly to
			<function>Phake::verify()</function>, <function>Phake::when()</function> accepts a mock object generated from
			<function>Phake::mock()</function> as its first parameter.
		</para>
		<para>
			Imagine I was in the process of building the next great online shopping cart. The first thing any
			good shopping cart allows is to be able to add items. The most important thing I want to know from
			the shopping cart is how much money in merchandise is in there. So, I need to make myself a
			<classname>ShoppingCart</classname> class. I also am going to need some class to define my items.
			I am more worried about the money right now and because of that I am keenly aware that any item
			in a shopping cart is going to have a price. So I will just create an interface to represent those
			items called <classname>Item</classname>. Now take a minute to marvel at the creativity of those
			names. Great, now check out the initial definitions for my objects.
		</para>
		<xi:include href="method-stubbing/simple-stubbing/order-v1.xml" />
		<para>
			So, I am furiously coding away at this fantastic new <classname>ShoppingCart</classname> class when I
			realize, I am doing it wrong! You see, a few years ago I went to this conference with a bunch of
			other geeky people to talk about how to make quality software. I am supposed to be writing unit
			tests. Here I am, a solid thirteen lines (not counting comments) of code into my awe inspiring
			new software and I haven't written a single test. I tell myself, "There's no better time to change
			than right now!" So I decide to start testing. After looking at the options I decide PHPUnit with
			this sweet new mock library called Phake is the way to go.
		</para>
		<para>
			My first test is going to be for the currently unimplemented <function>ShoppingCart::getSubTotal()</function>
			method. I already have a pretty good idea of what this function is going to need to do. It will
			need to look at all of the items in the cart, retrieve their price, add it all together and return
			the result. So, in my test I know I am going to need a fixture that sets up a shopping cart with
			a few items added. Then I am going to need a test that calls <function>ShoppingCart::getSubTotal()</function>
			and asserts that it returns a value equal to the price of the items I added to the cart. One catch
			though, I don't have any concrete instances of an Item. I wasn't even planning on doing any of
			that until tomorrow. I really want to just focus on the <classname>ShoppingCart</classname> class.
			Never fear, this is why I decided to use Phake. I remember reading about how it will allow me to
			quickly create instance of my classes and interfaces that I can set up stubs for so that method
			calls return predictable values. This project is all coming together and I am really excited.
		</para>
		<xi:include href="method-stubbing/simple-stubbing/ordertest-v1.xml" />
		<para>
			My test here shows a very basic use of Phake for creating method stubs. I am creating three different mock
			implementations of the <classname>Item</classname> class. Then for each of those item classes, I am creating
			a stub using <function>Phake::when()</function> that will return 100, 200, and 300 respectively. I know my method
			that I am getting ready to implement will need to call those methods in order to calculate the total cost of the
			order.
		</para>
		<para>
			My test is written so now it is time to see how it fails. I run it with phpunit and see the output in <xref linkend="method-stubbing.simple-stubbing.ordertest-v1-output" />
		</para>
		<xi:include href="method-stubbing/simple-stubbing/ordertest-v1-output.xml" />
		<para>
			Now that I have a working (and I by working I mean breaking!) test it is time to look at the code necessary to make
			the test pass.
		</para>
		<xi:include href="method-stubbing/simple-stubbing/order-v2.xml" />
		<para>
			The code here is pretty simple. I am just iterating over the <property>ShoppingCart::$item</property> property,
			calling the <function>Item::getPrice()</function> method, and adding them all together. Now when I run my test, I
			get <xref linkend="method-stubbing.simple-stubbing.ordertest-v2-output" />. The tests were successful and I am getting
			off to a great start with my shopping cart.
		</para>
		<xi:include href="method-stubbing/simple-stubbing/ordertest-v2-output.xml" />
		<para>
			So, what is Phake doing here? Phake is providing us a predictable implementation of the <function>Item::getPrice()</function>
			method that we can use in our test. It helps me to ensure the when my test breaks I know exactly where it is breaking.
			I will not have to be worried that a bad implementation of <function>Item::getPrice()</function> is breaking my tests.
		</para>
	</section>
	<section id="how-phake-when-works"><title>How Phake::when() Works</title>
		<para>
			Internally Phake is doing quite a bit when this test runs. The three calls to <function>Phake::mock()</function> are
			creating three new classes that in this case each implement the <classname>Item</classname> interface. These new classes
			each define implementations of any method defined in the <classname>Item</classname> interface. If <classname>Item</classname>
			extended another interface, implementations of all of that parent's defined methods would be created as well. Each
			method being implemented in these new classes does a few different things. The first thing that it does is record
			the fact that the method was called and stores the parameters that were used to call it. The next significant thing
			it does is looks at the stub map for that mock object. The stub map is a map that associates answers to method matchers.
			An answer is what a mocked object will return when it is called. By default, a call to a mock object returns a static
			answer of NULL. We will discuss answers more in <xref linkend="answers" />. A method matcher has two parts. The
			first is the method name. The second is an array of arugments. The array of arguments will then contain various constraints
			that are applied to each argument to see if a given argument will match. The most common constraint is an equality constraint
			that will match loosely along the same lines as the double equals sign in PHP. We will talk about matchers more in
			<xref linkend="matchers" />.
		</para>
		<para>
			When each mock object is initially created, its stub map will be empty. This means that any call to a method on a mock object
			is going to return a default answer of NULL. If you want your mock object's methods to return something else you must add answers
			to the stub map. The <function>Phake::when()</function> method allows you to map an answer to a method matcher for a given mock object.
			The mock object you want to add the mapping to is passed as the first parameter to <function>Phake::when()</function>. The
			<function>Phake::when()</function> method will then return a proxy that can be used add answers to your mock object's stub
			map. The answers are added by making method calls on the proxy just as you would on the mock object you are proxying. In
			<xref linkend="method-stubbing.simple-stubbing.ordertest-v1" /> above you saw a call to <literal>Phake::when($this->item1)->getPrice()</literal>.
			The <function>getPrice()</function> call here was telling Phake that I am about to define a new answer that will be returned
			any time <literal>$this->item->getPrice()</literal> is called in my code. The call to <literal>$this->item->getPrice()</literal>
			returns another object that you can set the answer on using Phake's fluent api. In the example I called
			<literal>Phake::when($this->item1)->getPrice()->thenReturn(100)</literal>. The <function>thenReturn()</function> method will
			bind a static answer to a matcher for <function>getPrice()</function> in the stub map for <literal>$this->item1</literal>.
		</para>
		<note>
			<title>Why do Phake stubs return Null by default?</title>
			<para>
				The reasoning behind this is that generally speaking, each method you test should depend on only what it needs to perform the
				(hopefully one) responsibility assigned to it. Normally you will have very controlled delegation to other objects. To help with
				localization of errors in your test it is assumed that you will always want to mock external dependencies to keep them from
				influencing the results of unit tests dedicated to the behavior of other parts of the system. Another reason for this default
				behavior is that it provides consistent and predictable behavior regardless of whether you are testing concrete classes, abstract
				classes, or interfaces. It should be noted that this default behavior for concrete methods in classes is different then the default
				behavior in PHPUnit. In PHPUnit, you have to explicitly indicate that you are mocking a method, otherwise it will call the actual
				method code. There are certainly cases where this is useful and this behavior can be achieved in Phake. I will discuss this aspect
				of Phake in <xref linkend="partial-mocks" />.
			</para>
		</note>
	</section>
	<section id="overriding-stubs"><title>Overwriting Existing Stubs</title>
		<para>
			My shopping cart application is coming right along. I can add items and the total price seems to be accurate. However,
			while I was playing around with my new cart I noticed a very strange problem. I was playing around with the idea of
			allowing discounts to be applied to a cart as just additional items that would have a negative price. So while I am
			playing around with this idea I notice that the math isn't always adding up. If I start with an item that is $100 and
			then add a discount that is $81.40 I see that the total price isn't adding up to $18.60. This is definitely problematic
			After doing some further research, I realize I made a silly mistake. I am just using simple floats to calculate the
			costs. Floats are by nature inacurrate. Once you start using them in mathematical operations they start to show their
			inadequacy for precision. In keeping with the test driven method of creating code I need to create a unit test that
			shows this flaw.
		</para>
		<xi:include href="method-stubbing/overriding-stubs/ordertest-v3.xml" />
		<para>
			You can see that I added another test method that uses actual floats for some of the prices as opposed to round numbers.
			Now when I run my test sweet I can see the fantastic floating point issue.
		</para>
		<xi:include href="method-stubbing/overriding-stubs/ordertest-v3-output.xml" />
		<para>
			Once you get over the strangeness of 38.6 not equaling 38.6 I want to discuss streamlining test cases with you. You
			will notice that the code in <function>ShoppingCartTest::testGetSubTotalWithPrecision()</function> contains almost
			all duplicate code when compared to <function>ShoppingCartTest::setUp()</function>. If I were to continue following
			this pattern of doing things I would eventually have tests that are difficult to maintain. Phake allows you to very
			easily override stubs. This is very important in helping you to reduce duplication in your tests and leads to tests
			that will be easier to maintain. To overwrite a previous stub you simply have to redefine it. I am going to change
			<function>ShoppingCartTest::testGetSubTotalWithPrecision()</function> to instead just redefine the <function>getPrice()</function>
			stubs.
		</para>
		<xi:include href="method-stubbing/overriding-stubs/ordertest-v4.xml" />
		<para>
			If you rerun this test you will get the same results shown in <xref linkend="method-stubbing.simple-stubbing.ordertest-v3-output" />.
			The test itself is much simpler though there is much less unnecessary duplication. The reason this works is because
			the stub map I was referring to in <xref linkend="how-phake-when-works" /> isn't really a map at all. It is more of
			a stack in reality. When a new matcher and answer pair is added to a mock object, it is added to the top of the stack.
			Then whenever a stub method is called, the stack is checked from the top down to find the first matcher that matches
			the method that was called. So, when I created the additional stubs for the various <function>Item::getPrice()</function>
			calls, I was just adding additional matchers to the top of the stack that would always get matched first by virtue
			of the parameters all being the same.
		</para>
	</section>
	<section id="stubbing-multiple-calls"><title>Stubbing Multiple Calls</title>
		<para>
			Another benefit of the stub mapping in Phake is that it allows you to very easily stub multiple calls to the same
			method that use different parameters. In my shopping cart I have decided to add some functionality that will allow
			me to easily add multiple products that are a part of a group to the shopping cart. To facilitate this I have decided
			to create a new class called <classname>ItemGroup</classname>. The <classname>ItemGroup</classname> object will be
			constructed with an array of <classname>Items</classname>. It will have a method on the class that will add all of
			the items in the group to the given cart and then the total price of items in the cart will be returned.
		</para>
		<para>
			It should be noted that earlier I decided to make a small change to the <function>ShoppingCart::addItem()</function>
			method to have it return the total price of items in the cart. I figured that this would be nice api level functionality
			to make working with the system a little bit easier. I would like to take advantage of that change with this code.
			Here's a stub of the functionality I am considering.
		</para>
		<xi:include href="method-stubbing/stubbing-multiple-calls/itemgroup.1.xml" />
		<para>
			The next test I am going to write now is going to be focusing on this new <function>ItemGroup::addItemsToCart()</function>
			method. In my test's <function>setUp()</function> method I'll create a new instance of <classname>ItemGroup</classname>
			which will require one or more <classname>Item</classname> implementations. I'll use mocks for those. Then the actual
			test case I am going to start with will be a test to assert that <function>ItemGroup::addItemsToCart()</function>
			returns the new shopping cart value. I already know that I am going to need to get this value by looking at the
			last return value from calls to <function>ShoppingCart::addItem()</function>. To allow for checking this I will mock
			<classname>ShoppingCart</classname> and create three stubs for <function>ShoppingCart::addItem()</function>. Each
			stub will be for a call with a different <classname>Item</classname>.
		</para>
		<xi:include href="method-stubbing/stubbing-multiple-calls/itemgrouptest.1.xml" />
		<para>
			In this example the <function>ShoppingCart::addItem()</function> method is being stubbed three times. Each time it
			is being stubbed with a different parameter being passed to <function>addItem()</function>. This a good example of
			how parameters are also checked whenever Phake looks at a mock object's stub map for answers. The default behavior
			of argument matching is again a loose equality check. Similar to how you would use the double equals operator in PHP.
			The other options for argument matching are discussed further in <xref linkend="matchers" />.
		</para>
	</section>
	<section id="stubbing-consecutive-calls"><title>Stubbing Consecutive Calls</title>
		<para>
			The previous test was a great example for how you can make multiple stubs for a single method however in reality it
			is not the best way for that particular test to be written. What if the <classname>Item</classname> objects in an
			<classname>ItemGroup</classname> aren't stored in the order they were passed in? I am needlessly binding my test
			to the order objects are stored. Phake provides the ability to map multiple answers to the same stub. This is done
			simply by chaining the answers together. I could rewrite the test from the previous chapter to utilize this feature
			of Phake.
		</para>
		<xi:include href="method-stubbing/stubbing-consecutive-calls/itemgrouptest.1.xml" />
		<para>
			You will notice a few of differences with <xref linkend="method-stubbing.stubbing-multiple-calls.itemgrouptest-1" />
			and <xref linkend="method-stubbing.stubbing-consecutive-calls.itemgrouptest-1" />. The first difference is that there
			is only one call to <function>Phake::when()</function>. The second difference is that I have chained together three
			calls to <function>thenReturn()</function>. The third difference is instead of passing one of my mock <classname>Item</classname>
			objects I have passed the result of the <function>Phake::anyParameters()</function> method. This is a special argument
			matcher in Phake that essentially says match any call to the method regardless of the number of parameters or the
			value of those parameters.
		</para>
		<para>
			So, this single call to <function>Phake::when()</function> is saying: "Whenever a call to <literal>$cart->addItem()</literal>
			is made, regardless of the parameters, return 10 for the first call, 20 for the second call, and 30 for the third
			call." If you are using consecutive call stubbing and you call the method more times than you have answers set, the
			last answer will continue to be returned. In this example, if <literal>$cart->addItem()</literal> were called a fourth
			time, then 30 would be returned again.
		</para>
	</section>
	<section id="stubbing-reference-parameters"><title>Stubbing Reference Parameters</title>
		<para>
			Occasionally you may run into code that utilizes reference parameters to provide additional output
			from a method. This is not an uncommon thing to run into with legacy code. Phake provides a custom
			parameter matcher (these are discussed further in <xref linkend="matchers" />)
			that allows you to set reference parameters. It can be accessed using <function>Phake::setReference()</function>.
			The only parameter to this matcher is the value you would like to set the reference parameter 
			to provided all other parameters match.
		</para>
		<xi:include href="method-stubbing/stubbing-reference-parameters/set-reference-parameter.xml" />
		<para>
			In <xref linkend="method-stubbing.set-reference-parameter" /> I am testing a new class I have created called <classname>ValidationLogger</classname>.
			It is a decorator for other implementations of <classname>IValidator</classname> that allows adding
			logging to any other validator. The <function>IValidator::validate()</function> method will always
			return an array of errors into the second parameter (a reference parameter) provided to the method.
			These errors are what my logger is responsible for logging. So in order for my test to work properly,
			I will need to be able to set that second parameter as a part of my stubbing call.
		</para>
		<para>
			In the call to <literal>Phake::when($validator)->validate()</literal> I have passed a call to
			<function>Phake::setReference()</function> as the second parameter. This is causing the mock
			implementation of <classname>IValidator</classname> to set <literal>$errors</literal> in
			<function>ValidationLogger::validate()</function> to the array specified by <literal>$expectedErrors</literal>.
			This allows me to quickly and easily validate that I am actually logging the errors returned back
			in the reference parameter.
		</para>
		<para>
			By default <function>Phake::setReference()</function> will always return true regardless of the 
			parameter initially passed in. If you would like to only set a reference parameter when that reference
			parameter was passed in as a certain value you can use the <function>when()</function> modifier.
			This takes a single parameter matcher as an argument. In <xref linkend="method-stubbing.set-conditional-reference-parameter" />
			you will see that the test has been modified to call <function>when()</function> on the result
			of <function>Phake::setReference()</function>. This modification will cause the reference parameter
			to be set only if the <literal>$errors</literal> parameter passed to <function>IValidatore::validate()</function>
			is initially passed as an empty array.
		</para>
		<xi:include href="method-stubbing/stubbing-reference-parameters/set-conditional-reference-parameter.xml" />
		<para>
			Please note, when you are using <function>Phake::setReference()</function> you still must provide
			an answer for the stub. If you use this function and your reference parameter is never changed,
			that is generally the most common reason.
		</para>
	</section>
	<section id="partial-mocks"><title>Partial Mocks</title>
		<para>
			When testing legacy code, if you find that the majority of the methods in the mock are using the thenCallParent() answer, you may find it easier to just use a partial mock in Phake. Phake partial mocks also allow you to call the actual constructor of the class being mocked. They are created using Phake::partialMock(). Like Phake::mock(), the first parameter is the name of the class that you are mocking. However, you can pass additional parameters that will then be passed as the respective parameters to that class’ constructor. The other notable feature of a partial mock in Phake is that its default answer is to pass the call through to the parent as if you were using thenCallParent().
		</para>
		<para>
			Consider the following class that has a method that simply returns the value passed into the constructor.
		</para>
		<xi:include href="method-stubbing/partial-mock.xml" />
		<para>
			Using Phake::partMock() you can instantiate a mock object that will allow this object to function
			as designed while still allowing verification as well as selective stubbing of certain calls.
			Below is an example that shows the usage of Phake::partMock()
		</para>
		<xi:include href="method-stubbing/test-partial-mock.xml" />
		<para>
			Again, partial mocks should not be used when you are testing new code. If you find yourself using them be sure to inspect your design to make sure that the class you are creating a partial mock is not doing too much.
		</para>
	</section>
	<section><title>Setting Default Stubs</title>
		<para>
			You can also change the default stubbing for mocks created with Phake::mock(). This is done by using the second parameter to Phake::mock() in conjunction with the Phake::ifUnstubbed() method. The second parameter to Phake::mock() is reserved for configuring the behavior of an individual mock. Phake::ifUnstubbed() allows you to specify any of the matchers mentioned above as the default answer if any method invocation is not explicitly stubbed. If this configuration directive is not provided then the method will return NULL by default. An example of this can be seen below.
		</para>
		<xi:include href="method-stubbing/default-stubs.xml" />
	</section>
	<section><title>Stubbing Magic Methods</title>
		<para>
			The verification of __call() was discussed in the previous chapter. Magic methods can also be stubbed in much the same way. If you want to verify a particular invocation of __call() you can stub the actual method call by mocking the method passed in as the first parameter.
		</para>
		<para>
			Consider the following class.
		</para>
		<xi:include href="method-stubbing/magic-class.xml" />
		<para>
			You could stub an invocation of the __call() method through a userspace call to magicCall() with the following code.
		</para>
		<xi:include href="method-stubbing/magic-method-stub.xml" />
		<para>
			If for any reason you need to explicitly stub calls to __call() then you can use Phake::whenCallMethodWith().
		</para>
		<xi:include href="method-stubbing/magic-method-explicit-stub.xml" />
	</section>
</chapter>
